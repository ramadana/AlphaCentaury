# Nginx Configuration ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: noc
data:
  default.conf: |
    upstream grafana {
        server grafana:3000;
    }
    
    upstream prometheus {
        server prometheus:9090;
    }
    
    upstream loki {
        server loki:3100;
    }
    
    upstream metabase {
        server metabase:3001;
    }
    
    # Main server block
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
        
        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_proxied expired no-cache no-store private auth;
        gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
        
        # Default location - serve a simple index page
        location / {
            return 200 '<!DOCTYPE html>
<html>
<head>
    <title>NOC Dashboard</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #333; text-align: center; }
        .services { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-top: 30px; }
        .service { background: #f8f9fa; padding: 20px; border-radius: 5px; text-align: center; }
        .service a { text-decoration: none; color: #007bff; font-weight: bold; }
        .service a:hover { color: #0056b3; }
        .status { margin-top: 10px; font-size: 0.9em; }
        .healthy { color: #28a745; }
    </style>
</head>
<body>
    <div class="container">
        <h1>NOC Services Dashboard</h1>
        <div class="services">
            <div class="service">
                <a href="/grafana/">Grafana</a>
                <div class="status healthy">Monitoring & Dashboards</div>
            </div>
            <div class="service">
                <a href="/prometheus/">Prometheus</a>
                <div class="status healthy">Metrics Collection</div>
            </div>
            <div class="service">
                <a href="/loki/">Loki</a>
                <div class="status healthy">Log Aggregation</div>
            </div>
            <div class="service">
                <a href="/metabase/">Metabase</a>
                <div class="status healthy">Business Intelligence</div>
            </div>
        </div>
    </div>
</body>
</html>';
            add_header Content-Type text/html;
        }
        
        # Grafana proxy
        location /grafana/ {
            proxy_pass http://grafana/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        
        # Prometheus proxy
        location /prometheus/ {
            proxy_pass http://prometheus/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Loki proxy
        location /loki/ {
            proxy_pass http://loki/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Metabase proxy
        location /metabase/ {
            proxy_pass http://metabase/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Metabase specific headers
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Nginx status endpoint
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }
    }
    
    # HTTPS server block (for future SSL configuration)
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name _;
        
        # SSL configuration (placeholder - add your certificates)
        # ssl_certificate /etc/nginx/certs/server.crt;
        # ssl_certificate_key /etc/nginx/certs/server.key;
        
        # For now, redirect to HTTP
        return 301 http://$host$request_uri;
    }

---
# Nginx Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: noc
  labels:
    app: nginx
    tier: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
        tier: frontend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "80"
        prometheus.io/path: "/nginx_status"
    spec:
      nodeSelector:
        skies/node: zarzakh
      containers:
        - name: nginx
          image: nginx:alpine
          ports:
            - containerPort: 80
              name: http
            - containerPort: 443
              name: https
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
            - name: nginx-logs
              mountPath: /var/log/nginx
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-config
        - name: nginx-logs
          emptyDir: {}

---
# Nginx Service (NodePort for external access)
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: noc
  labels:
    app: nginx
    tier: frontend
spec:
  type: NodePort
  selector:
    app: nginx
  ports:
    - port: 80
      targetPort: 80
      nodePort: 32080
      protocol: TCP
      name: http
    - port: 443
      targetPort: 443
      nodePort: 32443
      protocol: TCP
      name: https
# Loki Configuration ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
data:
  loki.yaml: |
    auth_enabled: false
    
    server:
      http_listen_port: 3100
      grpc_listen_port: 9096
    
    common:
      path_prefix: /loki
      storage:
        filesystem:
          chunks_directory: /loki/chunks
          rules_directory: /loki/rules
      replication_factor: 1
      ring:
        instance_addr: 127.0.0.1
        kvstore:
          store: inmemory
    
    schema_config:
      configs:
        - from: 2020-10-24
          store: boltdb-shipper
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h
    
    ruler:
      alertmanager_url: http://localhost:9093
    
    analytics:
      reporting_enabled: false
    
    limits_config:
      enforce_metric_name: false
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      max_cache_freshness_per_query: 10m
      split_queries_by_interval: 15m
      
    chunk_store_config:
      max_look_back_period: 0s
      
    table_manager:
      retention_deletes_enabled: false
      retention_period: 0s
      
    compactor:
      working_directory: /loki/boltdb-shipper-compactor
      shared_store: filesystem
      
    frontend:
      compress_responses: true
      max_outstanding_per_tenant: 256

---
# Loki Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
  labels:
    app: loki
    tier: logging
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
        tier: logging
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3100"
    spec:
      nodeSelector:
        skies/node: zarzakh
      containers:
        - name: loki
          image: grafana/loki:2.9-alpine
          args:
            - -config.file=/etc/loki/loki.yaml
          ports:
            - containerPort: 3100
              name: http-metrics
            - containerPort: 9096
              name: grpc
          volumeMounts:
            - name: loki-config
              mountPath: /etc/loki
            - name: loki-storage
              mountPath: /loki
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "200m"
          livenessProbe:
            httpGet:
              path: /ready
              port: 3100
            initialDelaySeconds: 45
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: 3100
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
      volumes:
        - name: loki-config
          configMap:
            name: loki-config
        - name: loki-storage
          persistentVolumeClaim:
            claimName: loki-pvc

---
# Loki Service
apiVersion: v1
kind: Service
metadata:
  name: loki
  labels:
    app: loki
    tier: logging
spec:
  type: ClusterIP
  selector:
    app: loki
  ports:
    - port: 3100
      targetPort: 3100
      protocol: TCP
      name: http-metrics
    - port: 9096
      targetPort: 9096
      protocol: TCP
      name: grpc

---
# Promtail Configuration ConfigMap (for log collection)
apiVersion: v1
kind: ConfigMap
metadata:
  name: promtail-config
data:
  config.yml: |
    server:
      http_listen_port: 9080
      grpc_listen_port: 0
    
    positions:
      filename: /tmp/positions.yaml
    
    clients:
      - url: http://loki:3100/loki/api/v1/push
    
    scrape_configs:
      - job_name: containers
        static_configs:
        - targets:
            - localhost
          labels:
            job: containerlogs
            __path__: /var/log/containers/*log
        pipeline_stages:
        - json:
            expressions:
              output: log
              stream: stream
              attrs:
        - json:
            expressions:
              tag: attrs.tag
            source: attrs
        - regex:
            expression: (?P<pod_name>(?P<container_name>.+)-\w{8,10}-\w{5})_(?P<namespace>.+)_(?P<container>.+)-(?P<container_hash>.+)\.log
            source: tag
        - timestamp:
            format: RFC3339Nano
            source: time
        - labels:
            stream:
            pod_name:
            namespace:
            container_name:
        - output:
            source: output

---
# Promtail DaemonSet (for log collection)
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: promtail
  labels:
    app: promtail
    tier: logging
spec:
  selector:
    matchLabels:
      app: promtail
  template:
    metadata:
      labels:
        app: promtail
        tier: logging
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9080"
    spec:
      serviceAccountName: promtail
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      containers:
      - name: promtail
        image: grafana/promtail:2.9-alpine
        args:
        - -config.file=/etc/promtail/config.yml
        - -log.level=info
        volumeMounts:
        - name: config
          mountPath: /etc/promtail
        - name: varlog
          mountPath: /var/log
          readOnly: true
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      terminationGracePeriodSeconds: 10
      volumes:
      - name: config
        configMap:
          name: promtail-config
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers

---
# Promtail ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: promtail

---
# Promtail ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: promtail
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]

---
# Promtail ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: promtail
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: promtail
subjects:
- kind: ServiceAccount
  name: promtail
  namespace: default
